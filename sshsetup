#!/usr/bin/env bash
#Copyright (C) 2015  Helal Uddin <helal00 at gmail.com>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

_srcsbinpath=$(dirname $(readlink -f $0))
_sshhost=$1
_sshuser=$2
_knownhostfile=$3


if [ -z "$_knownhostfile" ] ; then
	_knownhostfile="$(eval echo ~$USER)/.hostsetupdone"
fi

if [ -s "$_srcsbinpath/functions" ] ; then
	. $_srcsbinpath/functions	
else
	echo "	ERROR: $_srcsbinpath/functions file not found!" 1>&2
	exit 1
fi

if ! isinteractive ; then
	echo "	ERROR: This script can't run in non-interactive mode...exiting." 1>&2
	exit 1
fi

if [ -z $_sshhost ] ; then
	read -p "Please enter the hostname or ip address of ssh remote server: " _sshhost
fi

if [ ! -z $_sshhost ] ; then
	if [ -z $_sshuser ] ; then
		read -p "Please enter the username of the remote server: " _sshuser
	fi
	if [ -z $_sshuser ] ; then
		echo "	ERROR: no user given." 1>&2
		exit 1
	fi
else
	echo "	ERROR: no host or ip given." 1>&2
	exit 1
fi

_sshkeyloc=""
if confirmtogo "Do you have a non default ssh key store location? (yes/only enter to use default [$(eval echo ~$USER)/.ssh]): " ; then
	read -p "Please enter your non default ssh key store directory: " _sshkeyloc
	if [ -z "$_sshkeyloc" ] || [ ! -d "$_sshkeyloc" ] ; then
		echo "	ERROR: No directory given or directory $_sshkeyloc does not exist. aborting..." 1>&2
		exit 1
	fi
else
	_sshkeyloc=$(eval echo ~$USER)/.ssh
fi

_genkey=0
_foundkey=0
_idfilename=""
_idtype=""
declare -a _pvkyenames
_dsafirst=""
_rsafirst=""
if [ -d $_sshkeyloc ] ; then
	for kf in $(ls -t $_sshkeyloc)
	do
		if [ -s "$_sshkeyloc/$kf" ] && grep -q "BEGIN DSA PRIVATE KEY" "$_sshkeyloc/$kf" ; then
			_pvkyenames[${#_pvkyenames[@]}]=$kf
			_foundkey=$((_foundkey+1))
			if [ -z "$_dsafirst" ] ; then
				_dsafirst=$kf
			fi
		fi
		if [ -s "$_sshkeyloc/$kf" ] && grep -q "BEGIN RSA PRIVATE KEY" "$_sshkeyloc/$kf" ; then
			_pvkyenames[${#_pvkyenames[@]}]=$kf
			_foundkey=$((_foundkey+1))
			if [ -z "$_rsafirst" ] ; then
				_rsafirst=$kf
			fi
		fi
	done
	
	if [ ! -z "$_dsafirst" ] ; then
		_idfilename="$_dsafirst"
		_idtype="dsa"
	fi
	if [ ! -z "$_rsafirst" ] ; then
		_idfilename="$_rsafirst"
		_idtype="rsa"
	fi
fi

if [ "$_foundkey" -gt 1 ] ; then
	if confirmtogo "We have found $_foundkey keys in $_sshkeyloc/. We will use the $_idtype key in $_sshkeyloc/$_idfilename. Do you want to use the other key instead?(yes/only enter to use default[$_sshkeyloc/$_idfilename]): " ; then
		echo "Here is private key files in $_sshkeyloc/: ${_pvkyenames[@]}"
		read -p "Enter the one of the names above as your current key : " _sshkeyfile
		if [ ! -z "$_sshkeyfile" ] ; then
			_inuarray=$(echo ${_pvkyenames[@]} | grep -o "$_sshkeyfile" | wc -w)
			if [ $_inuarray -lt 1 ] || [ ! -s "$_sshkeyloc/$_sshkeyfile" ] ; then
				echo "	ERROR: You input an invalid filename or the file is empty. aborting ..." 1>&2 
				exit 1;
			else
				_idfilename="$_sshkeyfile"
			fi
		else
			echo "	ERROR: You input is empty. aborting ..." 1>&2 
		    exit 1;
		fi	
	fi
fi



if [ ! -s "$_sshkeyloc/${_idfilename}" ] ; then
	_genkey=1
else
	if confirmtogo "$_foundkey key file(s) found in $_sshkeyloc/. Do you want to setup another key to use now? (yes/only enter to cancel) : " ; then
		read -p "Please enter a filename for your new key : " _customname
		if [ -z "$_customname" ] || [ -f "$_sshkeyloc/${_customname}" ] ; then
			echo "    ERROR: No file name given or the file already exist, please retry with another name. aborting ..." 1>&2
			exit 1
		fi
		_idfilename=${_customname}
	    _genkey=1	
	fi	
fi

if [ "$_genkey" -eq 1 ] ; then
	if confirmtogo "We will generate 2048-bit RSA key by default. DO you want to customize this? (yes/only enter to take default[2048-bit RSA]): " ; then
		read -p "Please enter the key type (rsa/dsa): default [rsa]:" _cusidtype
		_cusidtype=${_cusidtype,,}
		if [ ! -z "$_cusidtype" ] ; then
			if [ "$_cusidtype" = "dsa" ] || [ "$_cusidtype" = "rsa" ] ; then
				_idtype="$_cusidtype"
			else
				echo "	ERROR: Not a valid type $_cusidtype. aborting..." 1>&2
				exit 1
			fi
		else
			_idtype="rsa"
		fi
		
		if [ -z "$_idfilename" ] ; then
			if [ "$_idtype" = "dsa" ] ; then
				_idfilename="id_dsa"
			else
				_idfilename="id_rsa"
			fi
		fi
		
		_dsalimit=""
		_themsg="Please enter bits you want for your $_idtype.Minimum [768] Default [2048]: "
		if ! _openssl=$(command -v openssl) ; then	
			if [ "$_idtype" = "dsa" ] ; then
				if confirmtogo "	IMPORTANT: As we can't find openssl installed in your system, we can genarate only 1024-bit dsa key only. Install openssl to change this limit. Do you want to continue with 1024-bit dsa key ? (type quit to exit/only enter to continue) : " "quit" ; then
					exit 1
				else
					_dsalimit=1024
				fi
			fi
		fi
		
		if [ ! -z "$_dsalimit" ] ; then
			_cusidbits="$_dsalimit"
		else
			read -p "$_themsg" _cusidbits
			_cusidbits=${_cusidbits,,}
		fi
		
		if [ ! -z "$_cusidbits" ] ; then	
			_bitserror=0
			if [ "$_idtype" = "dsa" ] ; then
				if [ -z "$_openssl" ]; then
					if [ "$_cusidbits" -eq 1024 ] ; then
						_bits="$_cusidbits"
					else
						_bitserror=1
					fi
				else
					if [ "$_cusidbits" -ge 768 ] ; then
						_bits="$_cusidbits"
					else
						_bitserror=1
					fi
				fi
			else
				if [ "$_cusidbits" -ge 768 ] ; then
					_bits="$_cusidbits"
				else
					_bitserror=1
				fi
			fi
			if [ "_bitserror" -eq 1 ] ; then
				echo "	ERROR: The given bits $_cusidbits is not valid. aborting ...." 1>&2
				exit 1
			fi
		else
			if [ "$_idtype" = "rsa" ] ; then
				_bits=2048
			else
				if [ -z "$_openssl" ]; then 
					_bits=1024
				else
					_bits=2048
				fi
			fi
		fi
	else
		_bits=2048
		_idtype="rsa"
		if [ -z "$_idfilename" ] ; then
			_idfilename="id_rsa"
		fi
	fi

	if [ "$_idtype" = "dsa" ] && [ "$_bits" -ne 1024 ]; then
		openssl dsaparam -genkey "$_bits" | openssl dsa -out "$_sshkeyloc/${_idfilename}"
		if [ "$?" -ne 0 ] ; then
			echo "	ERROR: key genaration with openssl failed. aborting.." 1>&2
			rm -f "$_sshkeyloc/${_idfilename}"
			exit 1
		fi
		chmod 600 "$_sshkeyloc/${_idfilename}"
		ssh-keygen -y -f "$_sshkeyloc/${_idfilename}" > "$_sshkeyloc/${_idfilename}.pub"
		if [ "$?" -ne 0 ] ; then
			echo "	ERROR: the key genaration failed. aborting.." 1>&2
			rm -f "$_sshkeyloc/${_idfilename}" "$_sshkeyloc/${_idfilename}.pub"
			exit 1
		fi
	else
		ssh-keygen -t "$_idtype" -b "$_bits" -f "$_sshkeyloc/${_idfilename}"
		if [ "$?" -ne 0 ] ; then
			echo "	ERROR: the key genaration failed. aborting.." 1>&2
			exit 1
		fi
	fi
fi	

chmod 700 ~/.ssh
_mykey="$(cat $_sshkeyloc/${_idfilename}.pub)"


_usesudo=0

if [ ! "$_sshuser" = "root" ] ; then
	
	read -p "If you also want to setup root user's key as a nonroot user with sudo, please type 'yes' or press enter only to cancel: "  _rootsetup
	_rootsetup=${_rootsetup,,}
	if [ ! -z "$_rootsetup" ] && [ "$_rootsetup" = "yes" ] ; then
		_usesudo=1
	fi
	
fi

_addtoknown=0
_addtoknownsudo=0
_exit0=0
_exit1=0

if [ -f $_knownhostfile ] && grep -q "ssh://$_sshuser@$_sshhost$" $_knownhostfile ; then
	read -p "Host and user: $_sshuser already known, overwrite existing (e.g. remote server reinstalled or set auto passphrase)? (yes/only enter to cancel): " _overwrite
	_overwrite=${_overwrite,,}
	if [ ! -z "$_overwrite" ] && [ "$_overwrite" = "yes" ] ; then
		_addtoknown=1
	else
		_exit0=1
	fi
fi

if [ "$_usesudo" -eq 1 ] && [ -f $_knownhostfile ] && grep -q "ssh://root@$_sshhost$" $_knownhostfile ; then
	read -p "Host and user: root already known, overwrite existing (e.g remote server reinstalled or set auto passphrase)? (yes/only enter to cancel): " _overwrite
	_overwrite=${_overwrite,,}
	if [ ! -z "$_overwrite" ] && [ "$_overwrite" = "yes" ] ; then
		_addtoknownsudo=1
	else
		_exit1=1
	fi
fi

if [ $_exit0 -eq 1 ] && [ $_exit1 -eq 1 ] ; then
	exit 0
fi



if [ $_exit0 -eq 0 ] ; then
ssh -t $_sshuser@$_sshhost bash -c 'echo
mkdir -p ~/.ssh
chmod 700 ~/.ssh
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys 
if ! grep -Fq '\'$_mykey\'' ~/.ssh/authorized_keys ; then
	sed -i -e '\''$''a'\\\'' ~/.ssh/authorized_keys
	echo '$_mykey' | tee -a ~/.ssh/authorized_keys
fi

if [ '$_exit1' -ne 1 ] && [ '$_usesudo' -eq 1 ] ; then
	rootprofile=$(eval echo ~root)
	sudo mkdir -p $rootprofile/.ssh
	sudo chown root:root $rootprofile/.ssh
	sudo touch $rootprofile/.ssh/authorized_keys
	sudo chown root:root $rootprofile/.ssh/authorized_keys
	sudo chmod 600 $rootprofile/.ssh/authorized_keys 
	if ! sudo grep -Fq '\'$_mykey\'' $rootprofile/.ssh/authorized_keys ; then
		sudo sed -i -e '\''$''a'\\\'' $rootprofile/.ssh/authorized_keys
		echo '$_mykey' | sudo tee -a $rootprofile/.ssh/authorized_keys
	fi
fi
'
	if [ $? -ne 0 ] ; then
		echo
		echo "	ERROR: setup in remote server failed, aborting. If the error message is saying 'Host key verification failed.' and you know the reasons of such changes(e.g. reinstalled os), you can clear the host key with 'ssh-keygen -R $_sshhost'"
		exit 1
	fi
fi

if [ $_exit0 -eq 1 ] && [ $_exit1 -eq 0 ] && [ "$_usesudo" -eq 1 ]  ; then
ssh -t $_sshuser@$_sshhost bash -c 'echo
rootprofile=$(eval echo ~root)
sudo mkdir -p $rootprofile/.ssh
sudo chown root:root $rootprofile/.ssh
chmod 700 $rootprofile/.ssh
sudo touch $rootprofile/.ssh/authorized_keys
sudo chown root:root $rootprofile/.ssh/authorized_keys
sudo chmod 600 $rootprofile/.ssh/authorized_keys
 
if ! sudo grep -Fq '\'$_mykey\'' $rootprofile/.ssh/authorized_keys ; then
	sudo sed -i -e '\''$''a'\\\'' $rootprofile/.ssh/authorized_keys
	echo '$_mykey' | sudo tee -a $rootprofile/.ssh/authorized_keys
fi
'
	if [ $? -ne 0 ] ; then
		echo
		echo "	ERROR: setup in remote server failed, aborting. If the error message is saying 'Host key verification failed.' and you know the reasons of such changes(e.g. reinstalled os), you can clear the host key with 'ssh-keygen -R $_sshhost' and run this script again."
		exit 1
	fi
fi



read -p "Did your private key requires a passhrase? type 'yes' or press enter only to cancel: " _passph
_passph=${_passph,,}

if [ ! -z "$_passph" ] && [ "$_passph" = "yes" ] ; then
	#http://www.funtoo.org/Keychain
	_debianbased=0
	if grep -qiEs "Ubuntu|Debian" /etc/issue ; then
		_debianbased=1
	fi
	
	if [ "$XDG_CURRENT_DESKTOP" = "" ]
	then
	  _desktop=$(echo "$XDG_DATA_DIRS" | sed 's/.*\(xfce\|kde\|gnome\).*/\1/')
	else
	  _desktop=$XDG_CURRENT_DESKTOP
	fi
	_addedtokeychain=1
	if [ ! -z $_desktop ] ; then
		echo "	INFORMATION: We detected you are on a Desktop environment. In most cases, Desktops have their own implementations of running ssh-agnet (e.g. gnome-keyring-daemon). You should depend on that because they provide support to both GUI and commandline apllications. For more info consult your Desktop docs"
	else
		_cmdloc=$(command -v keychain)
		_nokeychain=1
		if [ -z "$_cmdloc"  ] || [ ! -f ${_cmdloc} ] ; then
			_nokeychain=0
			if [ $_debianbased -eq 1 ]; then
				read -p "keychain utility is not isntalled. To istall it you must be a sudoer.you want to install it? (yes/no): " _doinstall
				_doinstall=${_doinstall,,}
				if [ ! -z "$_doinstall" ] && [ "$_doinstall" = "yes" ] ; then
					sudo apt-get install keychain
					if [ $? -eq 0 ] ; then
						_nokeychain=1
					fi
				else
					echo "Ask your admnistrator to install it for you with sudo apt-get install keychain"	
				fi
			else
				echo "Please install utility package 'keychain' for your distro to setup auto passphrase. e.g. for debian 'sudo apt-get install keychain'"

			fi
		fi
		
		if [ $_nokeychain -eq 1 ] && ! grep -q "eval \`keychain --quick --eval ${_idfilename}\`" ~/.bashrc ; then
			sed -i -e '$a\' ~/.bashrc
			echo "eval \`keychain --quick --eval ${_idfilename}\`" >> ~/.bashrc
			_addedtokeychain=0

		fi
	fi

	if [ $_addedtokeychain -eq 0 ] ; then	
		echo "    IMPORTANT: logout ang login again for changes to take affect. You have to type the passphrase after every boot manually in terminal or via ssh." 1>&2
	fi
fi

if [ $_addtoknown -eq 0 ] && ( [ ! -f $_knownhostfile ] || ! grep -Fq "ssh://$_sshuser@$_sshhost"  $_knownhostfile ) ; then
	if [ -f $_knownhostfile ] ; then
		sed -i -e '$a\' $_knownhostfile
	fi	
	echo "ssh://$_sshuser@$_sshhost" >> $_knownhostfile
fi
if [ $_addtoknownsudo -eq 0 ] && ( [ ! -f $_knownhostfile ] || ! grep -Fq "ssh://root@$_sshhost"  $_knownhostfile ) ; then
	sed -i -e '$a\' $_srcsbinpath/knownhost
	echo "ssh://root@$_sshhost" >> $_knownhostfile
fi

echo "   INFORMATION: Now check, you can login without password or not. If everything ok, its time to change your ssh password to something too difficult with 'passwd' command and keep it in bank vault or lock your account password with 'passwd -l username', so none can enter your system with password."
exit 0

#!/usr/bin/env bash
#Copyright (C) 2015  Helal Uddin <helal00 at gmail.com>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

_srcsbinpath=$(dirname $(readlink -f $0))
_noask=""
_install=""
_version=""
_configure=""
_ppasource=""
_noautomod=""
#_pkgtoinstall="nginx-extras"
_compiledir="/opt/compiledebnginx"
_modulesdir="custommodules"
_others="others"
_yum=$(command -v yum)

if [ -z "$_yum" ] ; then
	echo "yum command not found. This script requires yum already installed. e.g. Fedora, Centos, RHEL" 1>&2
	exit 1
fi

if [ "${1,,}" = "noask" ] ; then
	_noask="noask"
	shift
fi

if [ "${1,,}" = "install" ] ; then
	_install="install"
	shift
fi

if [ "${1,,}" = "noautomod" ] ; then
	_noautomod="noautomod"
	shift
fi
 	

if [ "${1,,}" = "version" ] && [ ! -z "$2" ]; then
	_version="$2"
	if [ ${#_version} -eq 5 ] ; then
		_version="release-$_version"
	fi
	if [ ${#_version} -ne 13 ] || [ ${_version:0:8} != "release-" ]; then
		echo "Invalid version number, e.g. '1.9.2' or 'release-1.9.2'" 1>&2
		exit 1
	fi
	shift
	shift
fi

if [ "${1,,}" = "ppasource" ] && [ ! -z "$2" ]; then
	_ppasource="$2"
	shift
	shift
fi

if [ "${1,,}" = "configure" ] && [ ! -z "$2" ]; then
	_configure="$2"
	shift
	shift
fi



if [ -s "$_srcsbinpath/functions" ] ; then
	. $_srcsbinpath/functions	
else
	echo "$_srcsbinpath/functions file not found!" 1>&2
	exit 1
fi

if [ ! -s "$_srcsbinpath/githublatest" ] ; then
	echo "$_srcsbinpath/githublatest file not found!" 1>&2
	exit 1
fi

if [ ! -s "$_srcsbinpath/sflatest" ] ; then
	echo "$_srcsbinpath/sflatest file not found!" 1>&2
	exit 1
fi

if [ ! -s "$_srcsbinpath/getgitrepo" ] ; then
	echo "$_srcsbinpath/getgitrepo file not found!" 1>&2
	exit 1
fi

if [ ! -z "$1" ] &&  [ "${1,,}" != "remove" ]; then
	if [ -d "$1" ] ; then
		_compiledir="$1"
	else
		echo "The given directory $1 not exist."
		exit 1
	fi
	if [ -z "$2" ] ; then
		echo "Custom modules subdirectory name not given."
		exit 1
	else
		if [ -d "$1/$2" ] ; then
			_modulesdir="$2"
		else
			echo "Custom modules subdirectory $1/$2 not exist."
			exit 1
		fi
	fi
	shift
	shift
fi

_toremove=1
if [ "${1,,}" = "remove" ]; then $releasever
_toremove=0
shift
fi


if [ ! -s "/etc/yum.repos.d/nginx.repo" ] || [ -z "$(command -v nginx)" ] ; then
_osname=$(getosname)
if [ "$_osname" != "centos" ] ; then
	_osname="rhel"
fi
cat > /etc/yum.repos.d/nginx.repo <<-EOL
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/$_osname/\$releasever/\$basearch/
gpgcheck=0
enabled=1
EOL
yum -y install nginx
fi

mkdir -p "$_compiledir/$_modulesdir"
if [ -z  "$_noask" ] ; then
	echo "	IMPORTANT: Please put any custom modules extracted in $_compiledir/$_modulesdir to compile with nginx."
	echo "	For repository from github or other online gits you can use our getgitrepo ulility like '$_srcsbinpath/getgitrepo last/branch branchname/release(tag) release(tag)_name http(s)://host/user/repo $_compiledir/$_modulesdir'"
	echo "	For repository from sourceforge you can use our $_srcsbinpath/sflatest ulility like 'wget --no-check-certificate \$($_srcsbinpath/sflatest url http(s)://sourceforge.net/projects/repo_name/)' and untar or unzip the file with 'tar -xzf yourfile.tar.gz -C $_compiledir/$_modulesdir/' or 'unzip yourfile.zip -d $_compiledir/$_modulesdir/'"
	if confirmtogo "...press enter to continue or type 'quit' to compile later: " "quit" ; then
		exit 0
	fi
fi 


$_yum -y install gcc gcc-c++ make zlib-devel pcre-devel openssl-devel wget zip unzip rar unrar bzip2 git curl libxml2 libxslt libxml2-devel libxslt-devel gd gd-devel perl-ExtUtils-Embed geoip geoip-devel pam pam-devel expat expat-devel redhat-lsb-core

_dodownload=0
if [ -z "$_version" ] ; then
		_version=$(wget -qO - http://nginx.org/en/download.html | grep -Eo 'Stable version(.*)/download/nginx-(.*).tar.gz(.*Legacy versions)' | grep -Eo '/download/nginx-(.*).tar.gz"' | grep -Eo '[0-9].[0-9].[0-9]')
		if [ -z "$_version" ] ; then
			_version=$($_srcsbinpath/githublatest https://github.com/nginx/nginx)
		else
			_version="release-${_version}"
		fi
		
fi
if [ -z  "$_noask" ] ; then
	if ls -d "$_compiledir"/nginx-*/ 2>/dev/null && [ "$(ls -A "$_compiledir"/nginx-*/)" ] ; then
		_nginxsrcdir=$(eval echo "$_compiledir"/nginx-*/)
		_nginxsrcdir=$(rmlastchar $_nginxsrcdir)
		_nginxversion=${_nginxsrcdir/$_compiledir\//}
		_nginxversion=${_nginxversion#*nginx-}
		if [ "$_nginxversion" != "$_version" ] ; then
			if confirmtogo "	IMPORTANT: we have found a old source folder $_nginxsrcdir which is not your requested version '$_version' as we detected. Are you want to remove this directory ? (yes/press enter only to calcel) : " ; then
				rm -rf "$_nginxsrcdir"
			else
				echo "Please remove or move the directory $_nginxsrcdir to continue further." 1>&2
				exit 1
			fi
		else
			if confirmtogo "	IMPORTANT: we have found a old source folder $_nginxsrcdir which is same as your requested version '$_version' as we detected. If you didn't make any customization to the files of this directory, you can safely delete it. Do you want to remove it for a fresh compile or keep it ? ('yes' to delete this dir / press enter only to keep it) : " ; then
				rm -rf "$_nginxsrcdir"
			else
				_dodownload=1
			fi
		fi
		
	fi 
fi


if [ "$_dodownload" -eq 0 ] ; then
	$_srcsbinpath/getgitrepo "release" "$_version" "https://github.com/nginx/nginx" "$_compiledir"
	if [ $? -ne 0 ] ; then
		echo "There is some error occured during fetching the source form https://github.com/nginx/nginx. Please try again." 1>&2
		exit 1
	fi
fi

_nginxsrcdir=""
_nginxversion=""
if ls -d "$_compiledir"/nginx*/ 2>/dev/null ; then
	_nginxsrcdir=$(eval echo "$_compiledir"/nginx-*/)
	_nginxsrcdir=$(rmlastchar $_nginxsrcdir)
	_nginxversion=${_nginxsrcdir/$_compiledir\//}
	_nginxversion=${_nginxversion#*nginx-}
else
	echo "No source folder we can detect in $_compiledir, exiting..." 1>&2
	exit 1
fi

if [ ! -s "$_nginxsrcdir/configure" ] ; then
	if [ -s "$_nginxsrcdir/auto/configure" ] ; then
		cp "$_nginxsrcdir/auto/configure" "$_nginxsrcdir/"
		chmod +x "$_nginxsrcdir/configure"
	else
		echo "we can't find configure in $_nginxsrcdir, exiting..." 1>&2
		exit 1
	fi
fi


_curdirectory=$PWD
cd "$_compiledir"

if [ -z "$_configure" ] ; then
_configure="./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/run/nginx.lock --pid-path=/var/run/nginx.pid --http-client-body-temp-path=/var/cache/nginx/client_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --user=nginx --group=nginx --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_mp4_module --with-http_perl_module --with-http_random_index_module --with-http_secure_link_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --with-file-aio"
else
	if [ ${_configure:0:12} != "./configure " ] ; then
		_configure = "./configure $_configure"
	fi
fi

if [ -z  "$_noask" ] ; then
	echo "IMPORTANT: The ./configure command we build so for nginx basic options is:"
	echo "$_configure"
	if confirmtogo "	IMPORTANT: Is the above line conatins your expected configure options for nginx without custom modules we are going to add later? (press enter to continue/type 'quit' to quit): " ; then
		cd "$_curdirectory"
		exit 0
	fi
fi

function package_exist(){
	local _pkgname
	_pkgname=$1
		if [ -d $(eval echo "$_compiledir/$_modulesdir/$_pkgname"*) ] ; then
			if [ -z  "$_noask" ] ; then
				if confirmtogo "	IMPORTANT: $_pkgname module already exist in $_compiledir/$_modulesdir, do you want to download again: (yes/press only enter to cancel downlaod): " ; then
					rm -rf $(eval echo "$_compiledir/$_modulesdir/$_pkgname"*)
					return 0
				else
					return 1
				fi
			else
				return 1
			fi
		else
			return 0
		fi
}

if [ -z "$_noautomod" ] ; then



	if [ -z "$_ppasource" ] ; then
	_ppasource="https://launchpad.net/~nginx/+archive/ubuntu/stable/+files/nginx_1.8.0-1%2Btrusty1.debian.tar.gz"
	fi
	_othersdirectory="$_compiledir/$_others"
	rm -rf "$_othersdirectory/outputs"
	mkdir -p "$_othersdirectory/archives"
	mkdir -p "$_othersdirectory/outputs"
	_ppatarfile=${_ppasource##*\/}
	_ppatarfile=$(printf ${_ppatarfile//\%/\\x})
	_nginxppatarfile="$_othersdirectory/archives/$_ppatarfile"
	if [ ! -s "$_nginxppatarfile" ] ; then
		wget -q --no-check-certificate "$_ppasource" --directory-prefix="$_othersdirectory/archives/"
		_tarres="$?"
	else
		_tarres=0
	fi
	#_nginxppatarfile=$(eval echo "$_othersdirectory/archives"/nginx*)
	
	if [ "$_tarres" -ne 0 ] || [ ! -s "$_nginxppatarfile" ]; then
		if [ -z  "$_noask" ] ; then
			if confirmtogo "	INFORMATION: There is some error downloading modules from $_ppasource. No extra default modules will be available, you want to continue? (press enter only to continue/type 'quit' to quit) : " "quit" ; then
				rm -rf "$_nginxppatarfile"
				exit 0
			fi
		fi
	else
		tar -xzf "$_nginxppatarfile" -C "$_othersdirectory/outputs"
		_tarres="$?"
		_nginxppadir="$_othersdirectory/outputs/debian"
		if [ "$_tarres" -ne 0 ] || [ ! -d "$_nginxppadir" ]; then
			if [ -z  "$_noask" ] ; then
				if confirmtogo "	INFORMATION: There is some error extractng modules from $_nginxppatarfile. No extra default modules will be available, you want to continue? (press enter only to continue/type 'quit' to quit) : " "quit" ; then
					rm -rf "$_nginxppatarfile" "$_nginxppadir"
					exit 0
				fi
			fi
		else
			rm -rf "$_nginxppadir/modules/README.Modules-versions"
			_pgerror=1	
			if package_exist "ngx_pagespeed" ; then
				echo "downloading ......"
				$_srcsbinpath/getgitrepo last https://github.com/pagespeed/ngx_pagespeed "$_nginxppadir/modules"
				if [ $? -eq 0 ] ; then
					_pagespeed_dirname=$(eval echo "$_nginxppadir/modules"/ngx_pagespeed*)
					NPS_VERSION=$(githublatest https://github.com/pagespeed/ngx_pagespeed)
					NPS_VERSION=${NPS_VERSION%%-*}
					NPS_VERSION=${NPS_VERSION/v}
					#cd ngx_pagespeed-*
					#cd "$_nginxppadir/modules/$_pagespeed_dirname"
					if [ ! -s $_othersdirectory/archives/${NPS_VERSION}.tar.gz ] ; then
						wget --no-check-certificate https://dl.google.com/dl/page-speed/psol/${NPS_VERSION}.tar.gz --directory-prefix="$_othersdirectory/archives"
					fi
					if [ ! -s "$_othersdirectory/archives/${NPS_VERSION}.tar.gz" ] ; then
						echo "There is some problem fetching psol library for ngx_pagespeed from https://dl.google.com/dl/page-speed/psol/${NPS_VERSION}.tar.gz"
						_pgerror=0
					else
						tar -xzf $_othersdirectory/archives/${NPS_VERSION}.tar.gz -C "$_pagespeed_dirname"
					fi
					# cd "$_compiledir"
				else
					echo "	IMPORTANT: there is some problem fetching ngx_pagespeed module from https://github.com/pagespeed/ngx_pagespeed ."
					_pgerror=0
				fi
				if [ "$_pgerror" -eq 0 ] ; then
					if confirmtogo ".....press enter to continue or type 'quit' to compile later: " "quit" ; then
						rm -rf "$_nginxppadir/modules/ngx_pagespeed"
						exit 1
					fi
				fi
			fi
			#read -p "press..........."
			if package_exist "nginx-upload-module" ; then
				echo "downloading ......"
				$_srcsbinpath/getgitrepo branch 2.2 https://github.com/vkholodkov/nginx-upload-module "$_nginxppadir/modules"
			fi
			if package_exist "nginx-module-vts" ; then
				echo "downloading ......"
				$_srcsbinpath/getgitrepo last https://github.com/vozlt/nginx-module-vts "$_nginxppadir/modules"
			fi
			if package_exist "nginx-http-auth-digest" ; then
				echo "downloading ......"
				$_srcsbinpath/getgitrepo last https://github.com/samizdatco/nginx-http-auth-digest "$_nginxppadir/modules"
			fi

			echo "	IMPORTANT: we have downloaded the following modules and their prerequisites to compile as nginx modules : "
			ls "$_nginxppadir/modules" 2>/dev/null
			echo "	IMPORTANT: If any of the modules above creates problems during compilation, please run this script again with 'remove 'folder_name_above1' 'folder_name_above2' and more as the last option and value seperated by space e.g. '$(readlink -f $0) remove 'nginx-http-push'' or '$(readlink -f $0) remove 'nginx-http-push' 'otherfolder''"
			if confirmtogo ".....press enter to continue or type 'quit' to compile later: " "quit" ; then
				exit 1
			fi
			for _moddir in $(ls -d "$_nginxppadir/modules"/*/)
			do
				_moddir=$(rmlastchar $_moddir)
				_moddir=${_moddir##*\/}
				if [ ! -d "$_compiledir/$_modulesdir/$_moddir" ] ; then
					mv "$_nginxppadir/modules/$_moddir" "$_compiledir/$_modulesdir/"
				fi
			done
			if [ "$_toremove" -eq 0 ] ; then
				for _rmtext in "$@"
				do
					rm -rf "$_compiledir/$_modulesdir/$_rmtext"
				done
			fi
		fi
	fi
fi

rm -rf "$_nginxppadir"

_nginxlua=$(eval echo "$_compiledir/$_modulesdir"/nginx-lua*)
_luanginx=$(eval echo "$_compiledir/$_modulesdir"/lua-nginx*)

if [ "$_nginxlua" != "$_compiledir/$_modulesdir/nginx-lua*" ] || [ "$_luanginx" != "$_compiledir/$_modulesdir/lua-nginx*" ] ; then
	_luajit=$(command -v luajit)
	_luajitversion="luajit-2.0"
	if [ -z "$_luajit" ] ; then
		if [ ! -d /usr/local/lib/lua ]; then
			_luajit=""
		else
			if [ ! -d /usr/local/include/luajit-2.0 ] ; then
				if [ ! -d /usr/local/include/luajit-2.1 ] ; then
					_luajit=""
				else
					_luajitversion="luajit-2.1"
				fi
			fi 
		fi
	fi
	
	if [ -z "$_luajit" ] ; then
		if [ -d "$_othersdirectory/luajit-2.0" ] ; then
			cd "$_othersdirectory/luajit-2.0"
			git pull
		else
			cd "$_othersdirectory"
			git clone http://luajit.org/git/luajit-2.0.git
			if [ $? -eq 0 ] ; then
				cd "$_othersdirectory/luajit-2.0"
			else
				echo "luajit can't be cloned from http://luajit.org/git/luajit-2.0.git" 1>&2
				exit 1
			fi
		fi
		make
		if [ $? -ne 0 ] ; then
			echo "luajit can't be build" 1>&2
			exit 1
		fi
		make install
	fi
	
	export LUAJIT_LIB=/usr/local/lib/
	export LUAJIT_INC=/usr/local/include/$_luajitversion/
	_configure="$_configure --with-ld-opt='-Wl,-rpath,/usr/local/lib'"
fi

if [ -z "$_noautomod" ] ; then
	echo "	IMPORTANT: we have found the following module directories (some of them is downloaded by us) as to compile as nginx modules in $_compiledir/$_modulesdir: "
else
	echo "	IMPORTANT: we have found the following module directories as to compile as nginx modules in $_compiledir/$_modulesdir: "
fi
ls -d "$_compiledir/$_modulesdir"/*/ 2>/dev/null
if [ -z  "$_noask" ] ; then
	if confirmtogo "	IMPORTANT: Please check all modules directories are listed above and all their prerequisites are installed already as per modules provider's instruction. Ensure no module is listed multiple times. if ok, press enter to continue or type 'quit' to compile later: " "quit" ; then
		exit 0
	fi 
fi

_strinc=""
for _dr in $(ls -d "$_compiledir/$_modulesdir"/*/)
do
	_dr=$(rmlastchar $_dr)
	if [ -z "$_strinc" ] ; then
		_strinc="--add-module=$_dr" 
	else
		_strinc="$_strinc --add-module=$_dr" 
	fi
done
_configure="$_configure $_strinc"
cd "$_nginxsrcdir"

if [ -z  "$_noask" ] ; then
	echo "	IMPORTANT: The final configure options:"
	echo "$_configure" 
	if [ "$_dodownload" -eq 0 ] ; then
		if confirmtogo "	IMPORTANT: We have downaloded nginx version: $_nginxversion source and ready to start compile. Please check above the final configure options . If ok, Press enter only to continue or type quit to compile later: " "quit" ; then
			cd "$_curdirectory"
			exit 0
		fi
	else
		if confirmtogo "	IMPORTANT: We have found nginx version: $_nginxversion source and ready to start compile. Please check above the final configure options. If ok, Press enter only to continue or type quit to compile later: " "quit" ; then
			cd "$_curdirectory"
			exit 0
		fi
	fi
fi
echo "$PWD"

$_configure

if [ $? -eq 0 ] ; then
	echo "Nginx configure was successful." 1>&2
else
	echo "Nginx configure not successful." 1>&2
	exit 1
fi

make -j2
_exit=$?

function holdnginx(){
	if grep -q "exclude=" /etc/yum.conf ; then
		_line=$(grep "exclude=" /etc/yum.conf)
		if echo "$_line" | grep -qo "=nginx " ; then
			return 0
		elif echo "$_line" | grep -qo "=nginx$" ; then
			return 0
		elif echo "$_line" | grep -qo " nginx$" ; then
			return 0
		elif echo "$_line" | grep -qo " nginx " ; then
			return 0
		fi
		_line="$_line nginx"
		replaceline "exclude=" "$_line" /etc/yum.conf
	else
		echo "exclude=nginx" >> /etc/yum.conf
	fi
}

if [ $_exit -eq 0 ] ; then
	echo "Nginx compile was successful."
	
	
	_installed=1
	if [ -z  "$_noask" ] ; then
		if confirmtogo "	IMPORTANT: Do you want to install the compiled nginx? (yes/enter only to cancel): " ; then
			make install
			if [ $? -eq 0 ] ; then
				holdnginx
				_installed=0
				chkconfig --add nginx
				chkconfig nginx on
				service nginx restart
				echo "Congratulations , nginx has been installed succesfully. Please check with 'nginx -V' command." 1>&2
			else
				echo "sorry, nginx can't be installed, there is some error." 1>&2
				exit 1
			fi
		fi
	fi
	if [ "$_installed" -eq 1 ] && [ ! -z  "$_install" ] ; then
		make install
		if [ $? -eq 0 ] ; then
			holdnginx
			chkconfig --add nginx
			chkconfig nginx on
			service nginx restart
			echo "Congratulations , nginx has been installed succesfully. Please check with 'nginx -V' command." 1>&2
		else
			echo "sorry, nginx can't be installed, there is some error." 1>&2
			exit 1
		fi
	fi
else
	echo "Nginx compile was not successful." 1>&2
fi

cd "$_curdirectory"

exit $_exit
